@using Newtonsoft.Json;
@model ElectionWeb.Models.ViewModels.ResultDetailViewModel

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_LayoutStar.cshtml";
}






<div class="row">
	<div class="col-md-6 grid-margin stretch-card">
		<div class="card">
			<div class="card-body">
				<h4 class="card-title">@Model.PollingUnitName</h4>
				<p class="card-description">

					
				</p>
				<dl class="row">

					<dt class="col-sm-4">
						@Html.DisplayNameFor(model => model.TotalVoteCount)
					</dt>
					<dd class="col-sm-8">
						@Html.DisplayFor(model => model.TotalVoteCount)
					</dd>
					<dt class="col-sm-4">
						@Html.DisplayNameFor(model => model.TotalParties)
					</dt>
					<dd class="col-sm-8">
						@Html.DisplayFor(model => model.TotalParties)
					</dd>
					<dt class="col-sm-4">
						@Html.DisplayNameFor(model => model.WardName)
					</dt>
					<dd class="col-sm-8">
						@Html.DisplayFor(model => model.WardName)
					</dd>
					<dt class="col-sm-4">
						@Html.DisplayNameFor(model => model.PollingUnitName)
					</dt>
					<dd class="col-sm-8">
						@Html.DisplayFor(model => model.PollingUnitName)
					</dd>
				</dl>


				<table class="table">
					<thead>
						<tr>
							<th>
								Party
							</th>

							<th>
								Vote Count
							</th>
							@*
							<th>
							@Html.DisplayNameFor(model => model.Active)
							</th>
							<th>
							@Html.DisplayNameFor(model => model.Deleted)
							</th>
							<th>
							@Html.DisplayNameFor(model => model.CreatedAt)
							</th>
							<th>
							@Html.DisplayNameFor(model => model.UpdatedAt)
							</th>*@
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model.PartyResult)
						{
							<tr>
								<td>
									@Html.DisplayFor(modelItem => item.PartyName)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.PartyCount)
								</td>
							@*	<td>
									<a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
									<a asp-action="Details" asp-route-id="@item.Id">Details</a> |
									<a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
								</td>*@
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>

	 <div class="col-lg-6 grid-margin stretch-card">
			  <div class="card">
				<div class="card-body">
				  <h4 class="card-title">Bar chart</h4>
				  <canvas id="barChart"></canvas>
				</div>
			  </div>
			</div>

</div>

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<script src="~/vendors/chart.js/Chart.min.js"></script>
@*<script src="~/js/chart.js"></script>*@
<script>

	function getRandomRgb(a) {
		var num = Math.round(0xffffff * Math.random());
		var r = num >> 16;
		var g = num >> 8 & 255;
		var b = num & 255;
		return 'rgba(' + r + ', ' + g + ', ' + b +', ' + a + ')';
	}

	var parties = @Html.Raw(JsonConvert.SerializeObject(Model.PartyResult));
	const label = [];
	let counts = [];
	let color = [];
	let bColor = [];
	parties.forEach(function(party){
		console.log(party);
		label.push(party["PartyName"]);
		counts.push(party["PartyCount"]);
		color.push(getRandomRgb(0.2));
		bColor.push(getRandomRgb(1));
	});

	var data = {
		labels: label,
	
	datasets: [{
			label: '# of Votes',
			data: counts,
			backgroundColor: color,
			borderColor: bColor,
			borderWidth: 1,
			fill: false
		}]
	};



	var options = {
		scales: {
			yAxes: [{
				ticks: {
					beginAtZero: true
				}
			}]
		},
		legend: {
			display: false
		},
		elements: {
			point: {
				radius: 0
			}
		}

	};


	if ($("#barChart").length) {
		var barChartCanvas = $("#barChart").get(0).getContext("2d");
		// This will get the first returned node in the jQuery collection.
		var barChart = new Chart(barChartCanvas, {
			type: 'bar',
			data: data,
			options: options
		});
	}


</script>